import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import numpy as np
from torchvision import datasets, transforms

from visdom import Visdom


batch_size = 2000
learning_rate = 0.01
epochs = 10
type_size = 4
transforms = transforms.Compose([
    transforms.ToTensor(),
    # transforms.Normalize((0.1307,), (0.3081,))
])

train_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=True, download=True,
                   transform=transforms), batch_size=batch_size, shuffle=True)
test_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=False, download=True,
                   transform=transforms), batch_size=batch_size, shuffle=True)


class MLP(nn.Module):

    def __init__(self):
        super(MLP, self).__init__()

        self.model = nn.Sequential(
            nn.Linear(784, 200),
            nn.LeakyReLU(inplace=True),
            nn.Linear(200, 200),
            nn.LeakyReLU(inplace=True),
            nn.Linear(200, 10),
            nn.LeakyReLU(inplace=True)
         )

    def forward(self, x):
        x = self.model(x)
        return x


net = MLP()
optimizer = optim.SGD(net.parameters(), lr=learning_rate)
criteon = nn.CrossEntropyLoss()

'''
# 训练权重w占用的内存
all_params_memory = 0
all_feature_memory = 0
for layer in net.layers:
    params_memory = layer.count_params()/(1024*1024) * 4
    print("训练权重w占用的内存:", layer.name, layer.count_params(), str(params_memory)+" M")
    all_params_memory = all_params_memory + params_memory
# 特征图占用内存
    feature_shape = layer.output_shape
    feature_size = 1
    for i in range(1,len(feature_shape)):
        feature_size = feature_size*feature_shape[i]
    feature_memory = feature_size/(1024*1024) * 4
    print("特征图占用内存:",feature_shape,feature_size,str(feature_memory)+" M")
    all_feature_memory = all_feature_memory + feature_memory
'''

# 监测模型中的每个权重参所占内存，以及统计整个权重参数所占内存
for a in range(1):
    all_params_memory = 0.
    for name, parameters in net.named_parameters():
        print('name', parameters)
        params_memory = np.prod(list(parameters.size()))
        print('Module {} : params: {:.4f}M'.format(
               name, params_memory * type_size / 1024 / 1024     # type_size字节
        ))
        all_params_memory = all_params_memory + params_memory
    print('Total Module memory: {:.4f}M'.format(all_params_memory * type_size / 1024 / 1024))

# 监测模型中的权重参数量所占内存，但这个net._get_name()有点问题
# para = sum([np.prod(list(p.size())) for p in net.parameters()])
# print('Model {} : params: {:4f}M'.format(net._get_name(), para * type_size / 1000 / 1000))



# # 如下也可以计算参数量
# # map(func, *iterables) --> map object. Make an iterator that computes the function using arguments from
# #    each of the iterables.
# # p.numel()返回输入input中元素的个数（即所有维度中元素的乘积）
#    p = sum(map(lambda p: p.numel(), model.parameters()))
#   print('parameters size:', p)



viz = Visdom()

viz.line([0.], [0.], win='train_loss', opts=dict(title='train_loss'))
# Y1,Y2  X. legend为图例的标识线
viz.line([[0.0, 0.0]], [0.], win='test', opts=dict(title='test loss&acc.',
                                                   legend=['loss', 'acc.']))
global_step = 0

for epoch in range(epochs):

    for batch_idx, (data, target) in enumerate(train_loader):
        # print('Before data.shape', data.shape)         # torch.Size([2000, 1, 28, 28])
        data = data.view(-1, 28*28)                    # 打平为torch.Size([2000, 784])送到net中的全连接层
        # print('After data.shape', data.shape)
        logits = net(data)
        loss = criteon(logits, target)

        ''' feature_shape = logits.shape()
        feature_size = 1
        for i in range(1, len(feature_shape)):
            feature_size = feature_size * feature_shape[i]
        feature_memory = feature_size / (1024 * 1024) * 4
        print("特征图占用内存:", feature_shape, feature_size, str(feature_memory) + " M")
        all_feature_memory = all_feature_memory + feature_memory'''

        optimizer.zero_grad()
        loss.backward()
# print(w.grad.norm())
        # 打印各个参数对应的名称，尺寸，以及梯度范数（因为梯度维度和本身一样，都很大，不容易看出更新的变化）
        for name, parameters in net.named_parameters():
            print('step before name: {}, parameters.size: {},  parameters 范数值: {}'
                  .format(name, parameters.size(),  parameters.grad.norm()))
        optimizer.step()
        for name, parameters in net.named_parameters():
            print('step after name: {}, parameters.size: {},  parameters 范数值: {}'
                  .format(name, parameters.size(),  parameters.grad.norm()))

        global_step += 1
# 在上面那个 train_loss中append增添
        viz.line([loss.item()], [global_step], win='train_loss', update='append')

        if batch_idx % 1000 == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset), 100 * batch_idx / len(
                    train_loader), loss.item()))

    # 训练一个epoch后测试其loss
    test_loss = 0
    correct = 0

    # 迭代一个batch
    for data, target in test_loader:
        data = data.view(-1, 28*28)
        logits = net(data)
        test_loss += criteon(logits, target).item()
        pred = logits.argmax(dim=1)
#        print('pred:', pred, pred.size())           # torch.Size([2000])
#        print('target:', target, target.size())     # torch.Size([2000])
        correct += pred.eq(target.data).float().sum().item()

# 在上面那个win=test 中append
    viz.line([[test_loss, correct/len(test_loader.dataset)]],
             [global_step], win='test', update='append')


# 测试前该图片为；
    viz.images(data.view(-1, 1, 28, 28), win='x')
    viz.text(str(pred.detach().numpy()), win='pred', opts=dict(title='pred'), update='append')
#   print('len str', len(str(pred.detach().numpy())))    # len ：17
    test_loss /= len(test_loader.dataset)
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset), 100 * correct/len(test_loader.dataset)))








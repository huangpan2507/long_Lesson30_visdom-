import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torchvision import datasets, transforms

from visdom import Visdom


batch_size = 2000
learning_rate = 0.01
epochs = 10
transforms = transforms.Compose([
    transforms.ToTensor(),
    # transforms.Normalize((0.1307,), (0.3081,))
])

train_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=True, download=True,
                   transform=transforms), batch_size=batch_size, shuffle=True)
test_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=False, download=True,
                   transform=transforms), batch_size=batch_size, shuffle=True)


class MLP(nn.Module):

    def __init__(self):
        super(MLP, self).__init__()

        self.model = nn.Sequential(
            nn.Linear(784, 200),
            nn.LeakyReLU(inplace=True),
            nn.Linear(200, 200),
            nn.LeakyReLU(inplace=True),
            nn.Linear(200, 10),
            nn.LeakyReLU(inplace=True)
         )

    def forward(self, x):
        x = self.model(x)
        return x


net = MLP()
optimizer = optim.SGD(net.parameters(), lr=learning_rate)
criteon = nn.CrossEntropyLoss()

viz = Visdom()

viz.line([0.], [0.], win='train_loss', opts=dict(title='train_loss'))
# Y1,Y2  X. legend为图例的标识线
viz.line([[0.0, 0.0]], [0.], win='test', opts=dict(title='test loss&acc.',
                                                   legend=['loss', 'acc.']))
global_step = 0

for epoch in range(epochs):

    for batch_idx, (data, target) in enumerate(train_loader):
        print(data.shape)
        data = data.view(-1, 28*28)
        logits = net(data)
        loss = criteon(logits, target)

        optimizer.zero_grad()
        loss.backward()
# print(w.grad.norm())
        for name, parameters in net.named_parameters():
            print('step before name: {}, parameters.size: {},  parameters: {}'
                  .format(name, parameters.size(),  parameters))
        optimizer.step()
        for name, parameters in net.named_parameters():
            print('step after name: {}, parameters.size: {},  parameters: {}'
                  .format(name, parameters.size(),  parameters))

        global_step += 1
# 在上面那个 train_loss中append增添
        viz.line([loss.item()], [global_step], win='train_loss', update='append')

        if batch_idx % 1000 == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset), 100 * batch_idx / len(
                    train_loader), loss.item()))

    test_loss = 0
    correct = 0
    for data, target in test_loader:
        data = data.view(-1, 28*28)
        logits = net(data)
        test_loss += criteon(logits, target).item()

        pred = logits.argmax(dim=1)
        correct += pred.eq(target.data).float().sum().item()

# 在上面那个win=test 中append
    viz.line([[test_loss, correct/len(test_loader.dataset)]],
             [global_step], win='test', update='append')
# 显示图片
    viz.images(data.view(-1, 1, 28, 28), win='x')
    viz.text(str(pred.detach().numpy()), win='pred', opts=dict(title='pred'))

    test_loss /= len(test_loader.dataset)
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset), 100 * correct/len(test_loader.dataset)))







